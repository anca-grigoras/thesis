package rubiks.ipl;

import ibis.ipl.Ibis;
import ibis.ipl.IbisCapabilities;
import ibis.ipl.IbisFactory;
import ibis.ipl.IbisIdentifier;
import ibis.ipl.PortType;
import ibis.ipl.ReadMessage;
import ibis.ipl.ReceivePort;
import ibis.ipl.SendPort;
import ibis.ipl.WriteMessage;
import ibis.ipl.MessageUpcall;
import ibis.ipl.ReceivePortIdentifier;

import java.io.IOException; 
import java.lang.ClassNotFoundException;
import java.util.*;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;


/**
 *  * This program is to be run as two instances. One is a server, the other a
 *   * client. The client sends a hello message to the server. The server prints it.
 *    * This version uses explicit receive.
 *     */

public class Rubiks implements MessageUpcall {

	PortType requestPortType = new PortType(PortType.COMMUNICATION_RELIABLE, PortType.SERIALIZATION_OBJECT, PortType.RECEIVE_AUTO_UPCALLS, PortType.CONNECTION_MANY_TO_ONE);
	PortType replyPortType = new PortType(PortType.COMMUNICATION_RELIABLE, PortType.SERIALIZATION_OBJECT, PortType.RECEIVE_EXPLICIT, PortType.CONNECTION_ONE_TO_ONE);
	IbisCapabilities ibisCapabilities = new IbisCapabilities(IbisCapabilities.ELECTIONS_STRICT, IbisCapabilities.CLOSED_WORLD);

	public static final boolean PRINT_SOLUTION = false;

	private final int INITIAL_BOUND = 3; //the number of twists the master initially do to generate jobs for workers

	private final Ibis myIbis;
	private IbisIdentifier master;
	private ReceivePort receivePort;

	private long start =0;
	private long end =0;

	private int bound = 0; //the bound within workers try to find a solution
	private int initialTwists = 0;

	private Vector<Cube> jobs = new Vector<Cube>();// this vector with jobs is permanent. Once the master generates it, it does not modify
	private Map<Cube, Integer> tempJobs = new HashMap<Cube,Integer>();//this map copies the jobs from the permanent jobs list  together with the current value of the bound and distributes them to workers. This step repeats for every bound.

	private int result = 0; //the number of solved cubes
	private int numberOfWorkers = 0; //the number of workers

	private CubeCache cache = null; 

	private final int jobsForWorker = 6;// how many jobs the master will send to a worker at one time
	private final int jobsForMaster = 3;//how many jobs the master will assign to itself at one time

	private int nrSentJobs = 0; // how many jobs have been assigned during the execution for a certain bound
	private int finishedExecutingWorkers = 0; // the number of workers that are still executing for a certain bound

	boolean waitForWork = true;

	Lock lock = new ReentrantLock();

	private boolean terminateWork = false;
	private boolean isSolved = false;
	Condition solvedCube = lock.newCondition();

	private int terminatedWorkers = 0; //the number of workers that finished their execution (after a solution is found)
	Condition waitingWorkers = lock.newCondition();

	private boolean isGenerated = false;
	Condition generatedJobs = lock.newCondition();

	Condition stopMaster = lock.newCondition();

	private boolean masterWait = true;
	private boolean solutionWithinInitialBound = false;

	private Rubiks(String[] args) throws Exception {
		// Create an ibis instance.
		// Notice createIbis uses varargs for its parameters.
		myIbis = IbisFactory.createIbis(ibisCapabilities, null, requestPortType, replyPortType);

		// Elect a master
		master = myIbis.registry().elect("Master");

		// If I am the master, run master, else run slave.
		if (master.equals(myIbis.identifier())) {
			Cube cube = initCube(args);
			master(cube); 
		} else 
			slave(master);

		// End ibis.
		myIbis.end();
	}

	/**
	 * It sets the initial configuration of the cube, based on the arguments from the command line (or the default ones)
	 * @param arguments
	 * @return
	 */
	private Cube initCube(String[] arguments){

		Cube cube = null;

		// default parameters of puzzle
		int size = 3;
		int twists = 11;
		int seed = 0;
		String fileName = null;

		// number of threads used to solve puzzle
		// (not used in sequential version)

		for (int i = 0; i < arguments.length; i++) {
			if (arguments[i].equalsIgnoreCase("--size")) {
				i++;
				size = Integer.parseInt(arguments[i]);
			} else if (arguments[i].equalsIgnoreCase("--twists")) {
				i++;
				twists = Integer.parseInt(arguments[i]);
			} else if (arguments[i].equalsIgnoreCase("--seed")) {
				i++;
				seed = Integer.parseInt(arguments[i]);
			} else if (arguments[i].equalsIgnoreCase("--file")) {
				i++;
				fileName = arguments[i];
			} else if (arguments[i].equalsIgnoreCase("--help") || arguments[i].equalsIgnoreCase("-h")) {
				printUsage();
				System.exit(0);
			} else {
				System.err.println("unknown option : " + arguments[i]);
				printUsage();
				System.exit(1);
			}
		}

		if (fileName == null) {
			cube = new Cube(size, twists, seed);
		} else {
			try {
				cube = new Cube(fileName);
			} catch (Exception e) {
				System.err.println("Cannot load cube from file: " + e);
				System.exit(1);
			}
		}
		initialTwists = twists;
		System.out.println("Searching for solution for cube of size "
				+ cube.getSize() + ", twists = " + twists + ", seed = " + seed);
		cube.print(System.out);
		System.out.flush();
		return cube;
	}

	public static void printUsage() {
		System.out.println("Rubiks Cube solver");
		System.out.println("");
		System.out
		.println("Does a number of random twists, then solves the rubiks cube with a simple");
		System.out
		.println(" brute-force approach. Can also take a file as input");
		System.out.println("");
		System.out.println("USAGE: Rubiks [OPTIONS]");
		System.out.println("");
		System.out.println("Options:");
		System.out.println("--size SIZE\t\tSize of cube (default: 3)");
		System.out
		.println("--twists TWISTS\t\tNumber of random twists (default: 11)");
		System.out
		.println("--seed SEED\t\tSeed of random generator (default: 0");
		System.out
		.println("--threads THREADS\t\tNumber of threads to use (default: 1, other values not supported by sequential version)");
		System.out.println("");
		System.out
		.println("--file FILE_NAME\t\tLoad cube from given file instead of generating it");
		System.out.println("");
	}

	/**
	 * The method contains the execution of the master.
	 * @param cube
	 * @throws IOException
	 * @throws Exception
	 * @throws ClassNotFoundException
	 */
	private void master (Cube cube) throws IOException, Exception, ClassNotFoundException {

		// Create a receive port, pass ourselves as the message upcall handler
		receivePort = myIbis.createReceivePort(requestPortType, "master", this);
		// enable connections
		receivePort.enableConnections();
		// enable upcalls
		receivePort.enableMessageUpcalls();

		numberOfWorkers = myIbis.registry().getPoolSize(); 
		start = System.currentTimeMillis();
		System.out.print("Bound now:");

		checkSolutionWithinInitialBound(cube);	//the jobs which are to be assigned to the workers

		lock.lock(); //signal the workers that the jobs have been assigned
		try{
			isGenerated = true;
			generatedJobs.signalAll();
		} finally {
			lock.unlock();
		}

		workMaster(); //the masters also works as a slave, meaning that it tries to solve the cube

		lock.lock();
		try {
			while (masterWait )
				stopMaster.await();
		} finally {
			lock.unlock();
		}

		end = System.currentTimeMillis();
		printResult();

		// Close receive port.
		receivePort.close();
	}

	/**
	 * The method checks if a solution was found within the initial bound; if found, the flags for founding the solution are set to true; if not, it copies the jobs to the map together with the bound
	 * @param cube
	 */
	private void checkSolutionWithinInitialBound(Cube cube){
		cache = new CubeCache(cube.getSize());
		result += generateJobs(cube, cache, 1); //
		if (result != 0) //the end
		{
			if (bound == 0) bound = 1;
			for (int i = 1; i<= bound; i++)
				System.out.print(" " + i);
			solutionWithinInitialBound = true;
			isSolved = true;
		}
		else
		{
			bound = INITIAL_BOUND;
			for (int i = 1; i<= bound; i++)
				System.out.print(" " + i);
			for (int i = 0; i< jobs.size(); i++){
				Cube newCube = cache.get();
				jobs.get(i).copyTo(newCube);
				tempJobs.put(newCube, bound);
			}
			
		}
	}
	
	/**
	 * The method generates the jobs within an initial bound. It also checks for a solution until it reached this bound; if found, it returns
	 * @param cube
	 * @param cache
	 * @param depth
	 * @return
	 */
	private int generateJobs(Cube cube, CubeCache cache, int depth)
	{
		if (cube.isSolved()) {
			bound = cube.getTwists();
			return 1;
		}
		if (cube.getTwists() >= INITIAL_BOUND) {
			return 0;
		}     

		Cube[] children = cube.generateChildren(cache);
		for (Cube child: children)
			jobs.add(child); //store the jobs

		if (depth >= INITIAL_BOUND || depth > initialTwists)
		{
			//bound = depth-1;
			return 0;
		}

		int res = 0;
		for (Cube child : children) {
			jobs.remove(child);
			// recursion step
			int childSolutions = generateJobs(child, cache, depth+1);
			if (childSolutions > 0) {
				res += childSolutions;
				if (PRINT_SOLUTION) {
					child.print(System.err);
				}
			}
			// put child object in cache
			cache.put(child);
		}

		//	if(result > 0) System.out.println("result found");
		return res;
	}

	/**
	 * The method represents the part in which the master also works as a slave, executing jobs.
	 */
	private void workMaster(){

		boolean stop = false;
		int myResult = 0;
		int myBound = 0;
		Map<Cube,Integer> myJobs = new HashMap<Cube,Integer>();		
		while (!stop)
		{
			Object obj = dealWithRequest(null, myResult, true); //asking for jobs; at the same time it sends its result
			if (obj instanceof Boolean) //the boolean means it is time to stop
				stop = (Boolean)obj;
			else //jobs were received
			{				
				myJobs.clear();
				myJobs.putAll((HashMap<Cube,Integer>)obj); //put them in the local map

				if (myJobs != null)
				{	//System.out.println("I received " + myJobs.size() + " jobs");
					Set<Map.Entry<Cube, Integer>> myJobsSet = myJobs.entrySet();
					myResult = 0;
					for (Map.Entry<Cube, Integer> job : myJobsSet)
					{
						Cube cube = job.getKey();
						CubeCache cache = new CubeCache(cube.getSize());
						myBound = job.getValue();
						cube.setBound(myBound);
						myResult += solutions(cube, cache); //solve the cube
						//if (myResult > 0)
						//System.out.println("for bound " + myBound + " result " + myResult);
					}					
					//Thread.sleep(100);
				} 
			}
		}

	}

	/**
	 * The worker execution part
	 * @param master
	 * @throws IOException
	 * @throws Exception
	 * @throws ClassNotFoundException
	 */
	private void slave(IbisIdentifier master) throws IOException, Exception, ClassNotFoundException {

		receivePort = myIbis.createReceivePort(replyPortType, null);
		receivePort.enableConnections();

		work();
		//System.out.println("I am stopping");
		receivePort.close();
		//System.out.println("slave stop");
	}

	/**
	 * Very similiar with workMaster method. The difference is that the worker asks for a job from the master by sending a request message and receives back also through a message the jobs or the termination flag
	 */
	@SuppressWarnings("unchecked")
	private void work(){
		boolean stop = false;
		int myResult = 0;
		int myBound = 0;
		Map<Cube,Integer> myJobs = new HashMap<Cube,Integer>();		
		while (!stop)
		{
			//System.out.println("i am the slave : bound : " + myBound  + " result : " + myResult);
			requestJob(myResult); //request jobs from the master; send the local result in the request
			Object obj = receiveJobs(); //the reply from the master

			//if (myResult > 0)
			//	System.out.println("the slave found a solution");

			if (obj instanceof Boolean) 
				stop = (Boolean)obj; //the termination flag
			else //jobs were received for execution
			{				
				myJobs.clear();
				myJobs.putAll((HashMap<Cube,Integer>)obj);

				if (myJobs != null)
				{	//System.out.println("I received " + myJobs.size() + " jobs");
					Set<Map.Entry<Cube, Integer>> myJobsSet = myJobs.entrySet(); 
					myResult = 0;
					for (Map.Entry<Cube, Integer> job : myJobsSet)
					{
						Cube cube = job.getKey();
						CubeCache cache = new CubeCache(cube.getSize());
						myBound = job.getValue();
						cube.setBound(myBound);
						myResult += solutions(cube, cache); //solve each cube from the map
						//if (myResult > 0)
						//System.out.println("for bound " + myBound + " result " + myResult);
					}					
					//Thread.sleep(100);
				} 
			}
		}

	}


	/** 
	 * Function called by Ibis to give us a newly arrived message
	 **
	 ** @param message
	 **            the message
	 ** @throws IOException
	 **            when the message cannot be read
	 **/
	public void upcall(ReadMessage message) throws IOException, ClassNotFoundException {

		Object obj = message.readObject();
		message.finish();


		if (obj instanceof AbstractMap.SimpleEntry) // the worker asked for jobs
		{

			AbstractMap.SimpleEntry<ReceivePortIdentifier, Integer> idresult = (AbstractMap.SimpleEntry<ReceivePortIdentifier, Integer>) obj; 

			ReceivePortIdentifier requestor = idresult.getKey();
			int workerResult = idresult.getValue();

			dealWithRequest(requestor, workerResult, false); //a request from a worker is received; the false parameter means that is a slave making this request and not the master
		}
	}

	/**
	 * The method checks if a result is received. When all the workers have finished their execution (once a result was found - this is what terminateWorkers variable is for) the master is signaled to stop 
	 * @param requestor
	 * @param res
	 * @param isMaster
	 * @return
	 */
	private Object dealWithRequest(ReceivePortIdentifier requestor, int res, boolean isMaster)
	{
		if(res > 0){ //if received result is higher than 0
			lock.lock();
			result += res; //add it to the final result
			//System.out.println(bound + " ------- " + workerResult);
			isSolved = true; 
			lock.unlock();
		}
		
		Object obj = manageRequest(requestor, res, isMaster);

		lock.lock();
		try {
			if (isSolved)
			{
				if(terminatedWorkers == numberOfWorkers) //when all the workers finished their execution
				{
					masterWait = false;
					stopMaster.signal(); //signal the master
				}
			}
		} finally {
			lock.unlock();
		}

		return obj;
	}

	/**
	 * This is the most complex method. It decides what is to be done, when a request for jobs is made.
	 * @param requestor
	 * @param res
	 * @param isMaster
	 * @return
	 */
	private Object manageRequest(ReceivePortIdentifier requestor, int res, boolean isMaster) {
		lock.lock();
		try {
			while (!isGenerated) //wait until the jobs are generated
				generatedJobs.await();

			if (solutionWithinInitialBound) //if the solution was found during the job generation, the slaves have to be notified to stop 
			{
				terminateWork = true; 
				terminatedWorkers++;
				if (!isMaster) // the master is notified by the return true statement
					notifyWorkers(requestor); //the slaves are notified through a message to stop
				return true;
			}

			//manage barrier arrival
			if (nrSentJobs == jobs.size()) //all the jobs for the current bound have been sent
			{
				finishedExecutingWorkers++;  //the number of workers asking for a job, once all the jobs have been assigned
				//System.out.println("I am here : " + executingWorkers);
				waitForWork = true;
				if (finishedExecutingWorkers != numberOfWorkers){	//once all the jobs for a bound have been assigned, the master waits for all the workers to return (including itself), meaning asking for a new job to collect all the results
					while (waitForWork)
						try {
							waitingWorkers.await();
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

				}else{	//only the last worker that makes a request executes this code (the else branch)
					//System.out.println("res -> " + result + "   :   " + executingWorkers);
					if (!isSolved) //if a solution has not been found yet
					{ //go to the next bound and send to the workers jobs to execute
						finishedExecutingWorkers = 0; //reset the number of workers asking for a job
						nrSentJobs = 0; //reset the number of sent jobs
						bound++; //go to the next bound
						System.out.print(" " + bound);
						for (int i = 0; i< jobs.size(); i++)
							tempJobs.put(jobs.get(i), bound); //copy the jobs in the map together with the new bound

					}
					waitForWork=false;
					waitingWorkers.signalAll(); //signal the workers to stop waiting

				}
				if (isSolved) //if a solution is found
				{
					terminateWork = true; 
					terminatedWorkers++; //increase the number of workers that terminated their execution (the master will be signaled to finish after all slaves are done with their execution)
					if (!isMaster)
						notifyWorkers(requestor); //notify the worker to stop
					return true;
				}
			}			

			int nrJobs = (isMaster) ? jobsForMaster : jobsForWorker; //the number of jobs that are supposed to be sent: for master ot worker; depends who makes the request
			int size = nrJobs < tempJobs.size() ? nrJobs : tempJobs.size(); //the number of jobs that are actually send: the supposed number (nrJobs) or the remaining jobs from the map (if there are less)
			nrSentJobs +=  size;  //increase the number of sent jobs
			
			Map<Cube,Integer> jobsForWorker = createJobsForWorker(size); //create a map with the jobs that are to be sent to the worker
			if (!isMaster)
				sendJobsToWorker(requestor, jobsForWorker); //send these jobs to the worker
			return jobsForWorker;

		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			lock.unlock();
		}
		return null;
	}

	/**
	 * In case that a solution is found, the workers are notified to stop by sending a boolean
	 * @param requestor
	 */
	private void notifyWorkers(ReceivePortIdentifier requestor) {
		try {
			SendPort sender = myIbis.createSendPort(replyPortType);
			sender.connect(requestor);
			WriteMessage message = sender.newMessage();
			message.writeObject(terminateWork);
			message.finish();
			sender.close();
		} catch (IOException e) {
			e.printStackTrace();
		}		
	}


	/**
	 * create a job list just for this worker and send it to him
	 * @return
	 */
	private Map<Cube,Integer> createJobsForWorker(int size){		
		Map<Cube,Integer> workerJobs = new HashMap<Cube,Integer>();
		//lock.lock();
		//try{	
			Set<Map.Entry<Cube, Integer>> jobSet = tempJobs.entrySet();
			Iterator<Map.Entry<Cube, Integer>> it = jobSet.iterator();
			int i = 0;
			while(it.hasNext() && (i < size))
			{
				i++;
				Map.Entry<Cube,Integer> e = it.next();
				workerJobs.put(e.getKey(), e.getValue());
				it.remove();
			}	
	//	}finally{
	//		lock.unlock();
	//	}
		return workerJobs;
	}

	/**
	 * This methos sends a map containing jobs and bound to the worker with the identifier specified
	 * @param worker
	 * @param workerJobs
	 */
	private void sendJobsToWorker(ReceivePortIdentifier worker, Map<Cube, Integer> workerJobs)
	{
		try {
			SendPort sender = myIbis.createSendPort(replyPortType);
			sender.connect(worker);
			WriteMessage message = sender.newMessage();
			message.writeObject(workerJobs);
			message.finish();
			sender.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}	

	private void printResult()
	{
		System.out.println();
		System.out.println("Solving cube possible in " + result + " ways of " + bound + " steps");

		System.err.println("Solving cube took " + (end - start)	+ " milliseconds");
	}   	

	/**
	 * the same method to solve the cube as in the sequential algorithm								
	 * @param cube
	 * @param cache
	 * @return
	 */
	private static int solutions(Cube cube, CubeCache cache) {
		if (cube.isSolved()) {
			return 1;
		}

		if (cube.getTwists() >= cube.getBound()) {
			return 0;
		}
		Cube[] children = cube.generateChildren(cache);

		int result = 0;

		for (Cube child : children) {
			int childSolutions = solutions(child, cache);
			if (childSolutions > 0) {
				result += childSolutions;
				if (PRINT_SOLUTION) {
					child.print(System.err);
				}
			}cache.put(child);
		}

		return result;
	}

	/**
	 * This method sends a message to the master with the request port identifier of the slave and its local result
	 * @param result
	 */
	private void requestJob(int result){		
		SendPort sender;
		try{
			sender = myIbis.createSendPort(requestPortType);
			sender.connect(master, "master");
			WriteMessage message = sender.newMessage();
			Map.Entry<ReceivePortIdentifier, Integer> mp = new  AbstractMap.SimpleEntry<ReceivePortIdentifier, Integer>(receivePort.identifier(),result);
			message.writeObject(mp);
			message.finish();
			sender.close();
		} catch(IOException e) {
			e.printStackTrace();
		}

	}

	/**
	 * This method reads the reply from the master
	 * @return
	 */
	private Object receiveJobs(){
		Object obj = null;
		try{
			ReadMessage message = receivePort.receive();
			obj = message.readObject();
			message.finish();
		} catch (IOException e) {
			e.printStackTrace();
		} catch(ClassNotFoundException e) {
			e.printStackTrace();
		}
		return obj;
	}


	public static void main (String args[]) { 

		try {
			new Rubiks(args);
		} catch (Exception e) {
			e.printStackTrace(System.err);
		}
	}
}


/**
 * 
 */
package poldercast.observers;

import java.util.Vector;

import poldercast.topics.TopicEvent;
import poldercast.topics.TopicsRepository;
import peernet.config.Configuration;
import peernet.core.CommonState;
import peernet.core.Control;
import peernet.core.Descriptor;
import peernet.core.Network;
import peernet.core.Node;

/**
 * @author anca
 *
 */
public class TrafficGenerator implements Control
{
  int pid;
  
  public TrafficGenerator(String name)
  {
    pid = Configuration.getPid(name+"."+PAR_PROTOCOL);
  }
  /* (non-Javadoc)
   * @see peernet.core.Control#execute()
   */
  @Override
  public boolean execute()
  {
    for (Topics t : TopicsRepository.getAllTopics())
    {
      Vector<Long> subscribers = TopicsRepository.getSubscribers(t);
      int index = CommonState.r.nextInt(subscribers.size());
      int id = subscribers.get(index).intValue();
      Node sender = Network.getByID(id);
      Descriptor descr = sender.getProtocol(pid).createDescriptor();
      TopicEvent te = new TopicEvent(sender, t, "i am a new event");
      sender.getTransportByPid(pid).send(sender, descr.address, pid, te);
    }
    return false;
  }
}

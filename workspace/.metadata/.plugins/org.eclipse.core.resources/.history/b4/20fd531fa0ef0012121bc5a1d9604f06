package rubiks.ipl;

import ibis.ipl.Ibis;
import ibis.ipl.IbisCapabilities;
import ibis.ipl.IbisFactory;
import ibis.ipl.IbisIdentifier;
import ibis.ipl.PortType;
import ibis.ipl.ReadMessage;
import ibis.ipl.ReceivePort;
import ibis.ipl.SendPort;
import ibis.ipl.WriteMessage;
import ibis.ipl.IbisProperties;
import ibis.ipl.MessageUpcall;
import ibis.ipl.ReceivePortIdentifier;

import java.io.IOException; 
import java.lang.ClassNotFoundException;
import java.util.*;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 *  * This program is to be run as two instances. One is a server, the other a
 *   * client. The client sends a hello message to the server. The server prints it.
 *    * This version uses explicit receive.
 *     */

public class Rubiks implements MessageUpcall {


	/**
	 * Port type used for sending the ReceivePortIdentifiers to the master
	 */
	/*PortType initPortType = new PortType(PortType.COMMUNICATION_RELIABLE,
            PortType.SERIALIZATION_OBJECT, PortType.RECEIVE_EXPLICIT,
            PortType.CONNECTION_MANY_TO_ONE);
	 */

	PortType requestPortType = new PortType(PortType.COMMUNICATION_RELIABLE,
			PortType.SERIALIZATION_OBJECT, PortType.RECEIVE_AUTO_UPCALLS,
			PortType.CONNECTION_MANY_TO_ONE);

	/**
	 * Port type used for sending a reply back
	 */
	PortType replyPortType = new PortType(PortType.COMMUNICATION_RELIABLE,
			PortType.SERIALIZATION_OBJECT, PortType.RECEIVE_EXPLICIT,
			PortType.CONNECTION_ONE_TO_ONE);



	IbisCapabilities ibisCapabilities = new IbisCapabilities(
			IbisCapabilities.ELECTIONS_STRICT, IbisCapabilities.CLOSED_WORLD);

	public static final boolean PRINT_SOLUTION = false;

	private final int INITIAL_BOUND = 2; //the number of twists the master initially do to generate jobs for workers

	private final Ibis myIbis;
	private IbisIdentifier master;
	private ReceivePort receivePort;

	private long start =0;
	private long end =0;

	private int steps = 0;
	private int bound = 0;
	private int initialTwists = 0;

	private List<Cube> jobs = new ArrayList<Cube>();// this list with jobs is permanent. Once the master generates it, it does not modify
	private Map<Cube, Integer> tempJobs = new HashMap<Cube,Integer>();//this list copies the jobs from the permanent jobs list and distributes them to workers. This step repeats for every bound.

	private int result = 0; //the number of solved cubes
	private int workers = 0; //the number of workers
	private boolean isSolved = false;
	private boolean terminateWork = false;
	
	private CubeCache cache = null; 

	private List<ReceivePortIdentifier> buf = new ArrayList<ReceivePortIdentifier>();
	private List<Cube> slaveQueue = new ArrayList<Cube>();
	private int numberOfWorkers = 0;
	private int terminatedWorkers = 0;

	private final int jobsForWorker = 4;// how many jobs the master will send to a slave at one time
	private final int jobsForMaster = 2;//how many jobs the master will assignt to itself at one time

	private int nrSentJobs = 0;
	private int executingWorkers = 0;

	Lock lock = new ReentrantLock();

	/**
	 * Constructor. Actually does all the work too :)
	 */
	private Rubiks(String[] args) throws Exception {
		// Create an ibis instance.
		// Notice createIbis uses varargs for its parameters.
		myIbis = IbisFactory.createIbis(ibisCapabilities, null, requestPortType, replyPortType);

		// Elect a master
		master = myIbis.registry().elect("Master");

		// If I am the master, run master, else run slave.
		if (master.equals(myIbis.identifier())) {
			Cube cube = initCube(args);
			master(cube); 
		} else 
			slave(master);

		// End ibis.
		myIbis.end();
	}

	private Cube initCube(String[] arguments){

		Cube cube = null;

		// default parameters of puzzle
		int size = 3;
		int twists = 11;
		int seed = 0;
		String fileName = null;

		// number of threads used to solve puzzle
		// (not used in sequential version)

		for (int i = 0; i < arguments.length; i++) {
			if (arguments[i].equalsIgnoreCase("--size")) {
				i++;
				size = Integer.parseInt(arguments[i]);
			} else if (arguments[i].equalsIgnoreCase("--twists")) {
				i++;
				twists = Integer.parseInt(arguments[i]);
			} else if (arguments[i].equalsIgnoreCase("--seed")) {
				i++;
				seed = Integer.parseInt(arguments[i]);
			} else if (arguments[i].equalsIgnoreCase("--file")) {
				i++;
				fileName = arguments[i];
			} else if (arguments[i].equalsIgnoreCase("--help") || arguments[i].equalsIgnoreCase("-h")) {
				printUsage();
				System.exit(0);
			} else {
				System.err.println("unknown option : " + arguments[i]);
				printUsage();
				System.exit(1);
			}
		}

		if (fileName == null) {
			cube = new Cube(size, twists, seed);
		} else {
			try {
				cube = new Cube(fileName);
			} catch (Exception e) {
				System.err.println("Cannot load cube from file: " + e);
				System.exit(1);
			}
		}
		initialTwists = twists;
		System.out.println("Searching for solution for cube of size "
				+ cube.getSize() + ", twists = " + twists + ", seed = " + seed);
		cube.print(System.out);
		System.out.flush();
		return cube;
	}

	public static void printUsage() {
		System.out.println("Rubiks Cube solver");
		System.out.println("");
		System.out
		.println("Does a number of random twists, then solves the rubiks cube with a simple");
		System.out
		.println(" brute-force approach. Can also take a file as input");
		System.out.println("");
		System.out.println("USAGE: Rubiks [OPTIONS]");
		System.out.println("");
		System.out.println("Options:");
		System.out.println("--size SIZE\t\tSize of cube (default: 3)");
		System.out
		.println("--twists TWISTS\t\tNumber of random twists (default: 11)");
		System.out
		.println("--seed SEED\t\tSeed of random generator (default: 0");
		System.out
		.println("--threads THREADS\t\tNumber of threads to use (default: 1, other values not supported by sequential version)");
		System.out.println("");
		System.out
		.println("--file FILE_NAME\t\tLoad cube from given file instead of generating it");
		System.out.println("");
	}

	private void master (Cube cube) throws IOException, Exception, ClassNotFoundException {

		// Create a receive port, pass ourselves as the message upcall handler
		receivePort = myIbis.createReceivePort(requestPortType, "master", this);
		// enable connections
		receivePort.enableConnections();
		// enable upcalls
		receivePort.enableMessageUpcalls();

		numberOfWorkers = myIbis.registry().getPoolSize()-1;
		
		start = System.currentTimeMillis();
		System.out.print("Bound now:");
		solve(cube);
		synchronized (this) {
			while (!isSolved || terminatedWorkers != numberOfWorkers)
				wait();
		}
	
		end = System.currentTimeMillis();
		printResult();

		// Close receive port.
		receivePort.close();

	}

	private void slave(IbisIdentifier master) throws IOException, Exception, ClassNotFoundException {

		receivePort = myIbis.createReceivePort(replyPortType, null);
		receivePort.enableConnections();

		work();
		//System.out.println("I am stopping");
		receivePort.close();
	}


	/** 
	 * Function called by Ibis to give us a newly arrived message
	 **
	 ** @param message
	 **            the message
	 ** @throws IOException
	 **            when the message cannot be read
	 **/
	public void upcall(ReadMessage message) throws IOException, ClassNotFoundException {

		Object obj = message.readObject();
		message.finish();
		if (obj instanceof ReceivePortIdentifier) // the worker asked for jobs
		{
			ReceivePortIdentifier requestor = (ReceivePortIdentifier) obj; //the worker that made a request
			
			checkJobsForWorker();
						
			if (terminateWork)
			{
				notifyWorkers(requestor);
				synchronized(this){
					terminatedWorkers++;
//					if (terminatedWorkers == numberOfWorkers)
//						notify();
				}
			}
			else
			{
				lock.lock();
				try{
					executingWorkers--;
				} finally{
					lock.unlock();
				}
				Map<Cube,Integer> workerJobs = createJobsForWorker();	
				sendJobsToWorker(requestor, workerJobs);
			}
			//System.out.println("I received a request from " + requestor);
		}
		else
			if (obj instanceof Integer) //the master received a result from a worker
			{
				synchronized(this){
					result += ((Integer)obj);
					//System.out.println("i have received " + result + "results for bound " + bound);
					isSolved = true;
					notify();
				}
			}

	}
	
	/**
	 * @throws InterruptedException 
	 * 
	 */
	private void checkJobsForWorker(){
		synchronized(this){		
			nrSentJobs += jobsForWorker;
			//System.out.println(nrSentJobs + " : " + executingWorkers);
			if (nrSentJobs == jobs.size() && executingWorkers == 0) //all the jobs for a bound have been assigned
			{
				if (!isSolved)
				{				
					nrSentJobs = 0;
					bound++;
					System.out.print(" " + bound);
					for (int i = 0; i< jobs.size(); i++)
						tempJobs.put(jobs.get(i), bound);
				}
				else
					terminateWork = true;
			}
		}
	}

	private void notifyWorkers(ReceivePortIdentifier requestor) {
		try {
			SendPort sender = myIbis.createSendPort(replyPortType);
			sender.connect(requestor);
			WriteMessage message = sender.newMessage();
			message.writeObject(terminateWork);
			message.finish();
			sender.close();
		} catch (IOException e) {
			e.printStackTrace();
		}		
	}

	
	/**
	 * create a job list just for this worker and send it to him
	 * @return
	 */
	private Map<Cube,Integer> createJobsForWorker(){
		Map<Cube,Integer> workerJobs = new HashMap<Cube,Integer>();
		lock.lock();
		try{	
			int size = jobsForWorker;
			if (tempJobs.size() < jobsForWorker)
			{
				size = tempJobs.size();
			}
			Set<Map.Entry<Cube, Integer>> jobSet = tempJobs.entrySet();
			Iterator<Map.Entry<Cube, Integer>> it = jobSet.iterator();
			int i = 0;
			while(it.hasNext() && (i < size))
			{
				i++;
				Map.Entry<Cube,Integer> e = it.next();
				workerJobs.put(e.getKey(), e.getValue());
				it.remove();
			}	
		}finally{
			lock.unlock();
		}
		return workerJobs;
	}

	private void sendJobsToWorker(ReceivePortIdentifier worker, Map<Cube, Integer> workerJobs)
	{
		lock.lock();
		try{
			executingWorkers++;
		} finally {
			lock.unlock();
		}
		try {
			SendPort sender = myIbis.createSendPort(replyPortType);
			sender.connect(worker);
			WriteMessage message = sender.newMessage();
			message.writeObject(workerJobs);
			message.finish();
			sender.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void solve(Cube cube){
		cache = new CubeCache(cube.getSize());
		result += generateJobs(cube, cache, 1);
		if (result != 0) //the end
		{
			printResult();
			terminateWork = true;
		}
		else
		{
			int bound = INITIAL_BOUND;
			for (int i = 0; i< jobs.size(); i++)
				tempJobs.put(jobs.get(i), bound); 
		}
	}

	private void printResult()
	{
		if (steps == 0) steps = 1;
		System.out.println();
		System.out.println("Solving cube possible in " + result + " ways of " + bound + " steps");
		
		System.err.println("Solving cube took " + (end - start)	+ " milliseconds");
	}   

	private int generateJobs(Cube cube, CubeCache cache, int depth)
	{
		if (cube.isSolved()) {
			steps = cube.getTwists();
			return 1;
		}
		if (cube.getTwists() >= INITIAL_BOUND) {
			return 0;
		}     

		Cube[] children = cube.generateChildren(cache);
		for (Cube child: children)
			jobs.add(child);

		if (depth >= INITIAL_BOUND || depth >= initialTwists)
			return 0;

		int result = 0;
		for (Cube child : children) {
			jobs.remove(child);
			// recursion step
			int childSolutions = generateJobs(child, cache, depth+1);
			if (childSolutions > 0) {
				result += childSolutions;
				if (PRINT_SOLUTION) {
					child.print(System.err);
				}
			}
			// put child object in cache
			cache.put(child);
		}

		return result;
	}

	private static int solutions(Cube cube, CubeCache cache) {
		if (cube.isSolved()) {
			return 1;
		}

		if (cube.getTwists() >= cube.getBound()) {
			return 0;
		}
		Cube[] children = cube.generateChildren(cache);

		int result = 0;

		for (Cube child : children) {
			int childSolutions = solutions(child, cache);
			if (childSolutions > 0) {
				result += childSolutions;
				if (PRINT_SOLUTION) {
					child.print(System.err);
				}
			}cache.put(child);
		}

		return result;
	}

	@SuppressWarnings("unchecked")
	private void work(){
		boolean stop = false;
		try {
			while (!stop)
			{
				requestJob();
				Object obj = receiveJobs();

				if (obj instanceof Boolean)
					stop = (Boolean)obj;
				else
				{				
					Map<Cube,Integer> myJobs = new HashMap<Cube,Integer>();
					myJobs.putAll((HashMap<Cube,Integer>)obj);

					if (myJobs != null)
					{	//System.out.println("I received " + myJobs.size() + " jobs");
						Set<Map.Entry<Cube, Integer>> myJobsSet = myJobs.entrySet();
						int bound = 0, myResult = 0;
						for (Map.Entry<Cube, Integer> job : myJobsSet)
						{
							Cube cube = job.getKey();
							CubeCache cache = new CubeCache(cube.getSize());
							bound = job.getValue();
							cube.setBound(bound);
							myResult = solutions(cube, cache);
							//System.out.println("for bound " + bound + " result " + myResult);
							if (myResult != 0)
							{
								System.out.println("i found " + myResult + " results for bound " + bound);
								sendResultToMaster(myResult);
							}
						}					
						Thread.sleep(100);
					} 
			}
		}
		}catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void sendResultToMaster(int myResult) {
		SendPort sender;
		try{
			sender = myIbis.createSendPort(requestPortType);
			sender.connect(master, "master");
			WriteMessage message = sender.newMessage();
			message.writeObject(myResult);
			message.finish();
			sender.close();
		} catch(IOException e) {
			e.printStackTrace();
		}	
	}

	private Object receiveJobs(){
		Object obj = null;
		try{
			ReadMessage message = receivePort.receive();
			obj = message.readObject();
			message.finish();
		} catch (IOException e) {
			e.printStackTrace();
		} catch(ClassNotFoundException e) {
			e.printStackTrace();
		}
		return obj;
	}

	private void requestJob(){
		SendPort sender;
		try{
			sender = myIbis.createSendPort(requestPortType);
			sender.connect(master, "master");
			WriteMessage message = sender.newMessage();
			message.writeObject(receivePort.identifier());
			message.finish();
			sender.close();
		} catch(IOException e) {
			e.printStackTrace();
		}

	}

	public static void main (String args[]) { 

		try {
			new Rubiks(args);
		} catch (Exception e) {
			e.printStackTrace(System.err);
		}
	}
}


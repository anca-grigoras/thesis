CV                       20
CG                       10

VV						 20
VG						 10

RV						 4
RG						 10

NODES                    250
TICKS_PER_CYCLE 	 20000

PORT                     14000
BOOTSTRAP_PORT           3000

engine.mode              net
engine.duration          TICKS_PER_CYCLE *106
random.seed              0
network.size             NODES

#######################
# POLDERCAST PROTOCOL #
#######################

include.protocol         cyclon, vicinity, rings, dissemination

protocol.cyclon          poldercast.protocols.Cyclon
{
  descriptor             poldercast.descriptor.DescriptorTopics
  settings               poldercast.protocols.CyclonSettings
  
  view                   CV
  gossip                 CG

  step                   TICKS_PER_CYCLE
  from			 5*TICKS_PER_CYCLE
  #until		 4*TICKS_PER_CYCLE
  randstart

  transport              udp
}

protocol.vicinity	 poldercast.protocols.Vicinity
{
  linkable		 cyclon, rings
  descriptor		 poldercast.descriptor.DescriptorTopics
  settings		 poldercast.protocols.VicinitySettings
  sendLinkableItems	 true
  
  view			 VV
  gossip		 VG
  
  step			 TICKS_PER_CYCLE
  from			 5*TICKS_PER_CYCLE
  randstart
  
  transport		 udp
}

protocol.rings		 poldercast.protocols.Rings
{
  linkable		 cyclon, vicinity
  
  descriptor		 poldercast.descriptor.DescriptorTopics
  settings		 poldercast.protocols.RingsSettings
  
  sendLinkableItems	 true
  
  k			 RV
  gossip		 RG
  
  step			 TICKS_PER_CYCLE
  from			 5*TICKS_PER_CYCLE
  randstart
  
  transport		 udp
}

protocol.dissemination	 poldercast.protocols.Dissemination
{
  linkable		 rings
  
  routing		 rings
  fanout		 2
	
  descriptor		 poldercast.descriptor.DescriptorTopics
  settings		 poldercast.protocols.DisseminationSettings
  
  sendLinkableItems	 true
  log			 logs/poldercast
  step			 TICKS_PER_CYCLE
  from			 5*TICKS_PER_CYCLE
  randstart
  
  transport		 udp
}

transport.udp            peernet.transport.TransportUDP
{
  port                   PORT
}


include.init             wire, topic_initializer

init.bootstrap           peernet.dynamics.WireKOut
{
  protocol               cyclon
  k                      4
}

init.wire                peernet.dynamics.BootstrapClient
{
  coordinator            kout
  protocol               cyclon
  #host                  localhost 
  host 			 fs0.das4.cs.vu.nl
  port                   BOOTSTRAP_PORT
}

init.topic_initializer 	 poldercast.initializers.NodeTopicsInitializer
{
  protocol		 vicinity
 
  data                   topics.TopicsRepository
  {
	#file		 data/twitter_10k.txt
  	file		 data/fb_1ksample.txt
        #file		 data/topics.txt
  }
}



###################
#    OBSERVERS    #
###################

include.control         traffic, test

control.test		test.NetworkObserverPoldercast
{
   step			TICKS_PER_CYCLE
   from			5*TICKS_PER_CYCLE
   protocol		dissemination
   cyclon		cyclon
   vicinity		vicinity
   rings		rings
   log			logs/poldercast
   statistics		statistics/poldercast		
   subscriptionsize	subscriptionsize/poldercast
   topicpopularity	topicpopularity/poldercast
}



control.ball             peernet.reports.BallExpansion
{
  protocol               cyclon
  n                      1
}

control.traffic		poldercast.observers.TrafficGeneratorNet
{
   step			TICKS_PER_CYCLE
   from			5*TICKS_PER_CYCLE
   protocol		dissemination
}

control.missedLinks	poldercast.observers.MissedRingsLinks
{
   step			TICKS_PER_CYCLE
   from			5*TICKS_PER_CYCLE
   protocol		rings
}

CV                       20
CG                       10

VV						 20
VG						 10

RV						 4
RG						 10

NODES                    1000
LOGFILE_PREFIX
SEC_PER_CYCLE 			 60
TICKS_PER_CYCLE 		 6000

engine.mode              sim
engine.duration          TICKS_PER_CYCLE *100
random.seed              0
network.size             NODES

#######################
# POLDERCAST PROTOCOL #
#######################

include.protocol         cyclon, vicinity, rings, dissemination

protocol.cyclon          poldercast.protocols.Cyclon
{
  descriptor             poldercast.descriptor.DescriptorTopics
  settings               poldercast.protocols.CyclonSettings
  
  view                   CV
  gossip                 CG

  step                   TICKS_PER_CYCLE
  #until					 4*TICKS_PER_CYCLE
  randstart

  transport              trans
}

protocol.vicinity		 poldercast.protocols.Vicinity
{
  linkable				 cyclon, rings
  
  descriptor			 poldercast.descriptor.DescriptorTopics
  settings				 poldercast.protocols.VicinitySettings
  
  sendLinkableItems		 true
  
  view					 VV
  gossip				 VG
  
  step					 TICKS_PER_CYCLE
  randstart
  
  transport				 trans
}

protocol.rings			 poldercast.protocols.Rings
{
  linkable				 cyclon, vicinity
  
  descriptor			 poldercast.descriptor.DescriptorTopics
  settings				 poldercast.protocols.RingsSettings
  
  sendLinkableItems		 true
  
  k						 RV
  gossip				 RG
  
  step					 TICKS_PER_CYCLE
  randstart
  
  transport				 trans
}

protocol.dissemination	 poldercast.protocols.Dissemination
{
  linkable			     rings
  
  routing				 rings
  fanout				 2
	
  descriptor			 poldercast.descriptor.DescriptorTopics
  settings				 poldercast.protocols.DisseminationSettings
  
  sendLinkableItems		 true
  
  step					 TICKS_PER_CYCLE
  randstart
  
  transport				 trans
}
transport.trans          peernet.transport.UniformRandomTransport
{
  mindelay               5
  maxdelay               10
}



include.init             bootstrap, topic_initializer

init.bootstrap           peernet.dynamics.WireKOut
{
  protocol               cyclon
  k                      4
}

init.topic_initializer 	 poldercast.initializers.NodeTopicsInitializer
{
  protocol				 vicinity
 
 data                    topics.TopicsRepository
 {
   file					data/fb_1ksample.txt
   #file					data/twitter_10k.txt
 }

}



###################
#    OBSERVERS    #
###################

include.control         traffic, test

control.test			test.NetworkObserverPoldercast
{
	step				TICKS_PER_CYCLE
	#from                TICKS_PER_CYCLE
	protocol			dissemination
	cyclon				cyclon
	vicinity			vicinity
	rings				rings
	log					sim/poldercast
	statistics			sim/poldercastst		
	subscriptionsize	sim/poldercastsub
	topicpopularity		sim/poldercasttop
}


control.log	     		poldercast.observers.Log
{
	step				TICKS_PER_CYCLE
	#from                TICKS_PER_CYCLE
	protocol			dissemination
	prot1				cyclon
	prot2				vicinity
	prot3				rings
	path				logs/logpoldercast
	pathsec				logs/secondpol
}

control.churn			poldercast.observers.ChurnObserver
{
	file				data/skype.avt
	ticks_per_sec         TICKS_PER_SEC
}


control.ball             peernet.reports.BallExpansion
{
  protocol               cyclon
  n                      1
}

control.degree          peernet.reports.DegreeStats
{
  trace
  #step                  10 * TICKS_PER_CYCLE
  step                  TICKS_PER_CYCLE
  protocol              rings
  undir
  #at                    1000
  method                freq
}

control.view 			poldercast.observers.ViewObserver
{
	step				TICKS_PER_CYCLE
	protocol			vicinity
	viewlen				VV
}

control.neighbors		poldercast.observers.NeighborsObserver
{
	step				TICKS_PER_CYCLE
	protocol			vicinity
}

control.conv		    poldercast.observers.IncompleteRings
{
	step				TICKS_PER_CYCLE
	protocol			rings
}

control.missedLinks		    poldercast.observers.MissedRingsLinks
{
	step				TICKS_PER_CYCLE
	protocol			rings
}

control.traffic			poldercast.observers.TrafficGenerator
{
	step				TICKS_PER_CYCLE
	protocol			dissemination
}

control.hitRatio		poldercast.observers.HitRatio
{
	step				TICKS_PER_CYCLE
	from                TICKS_PER_CYCLE
	protocol			dissemination
}

control.speed			poldercast.observers.DisseminationSpeed
{
	step				TICKS_PER_CYCLE
	from                TICKS_PER_CYCLE
	protocol			dissemination				
}

control.prog  		    poldercast.observers.DisseminationProgress
{
	step				TICKS_PER_CYCLE
	from                70*TICKS_PER_CYCLE
	until				71*TICKS_PER_CYCLE
	protocol			dissemination	
}

control.dup				poldercast.observers.DuplicationFactor
{
	step				TICKS_PER_CYCLE
	from                TICKS_PER_CYCLE
	protocol			dissemination				
}

control.overlay			poldercast.observers.OverlayDegree
{
	step				TICKS_PER_CYCLE
	from                TICKS_PER_CYCLE
	protocol			rings		
}

control.consumption		poldercast.observers.BandwithConsumption
{
	step				TICKS_PER_CYCLE
	from                70*TICKS_PER_CYCLE
	until				71*TICKS_PER_CYCLE
	protocol			dissemination	
	cyclon				cyclon
	vicinity			vicinity
	rings				rings
}

control.msgOverhead		poldercast.observers.MessageOverhead
{
	step				TICKS_PER_CYCLE
	from                TICKS_PER_CYCLE
	protocol			dissemination	
}

control.subsize 		poldercast.observers.ScalabilitySubscriptionSize
{
	step				TICKS_PER_CYCLE
	from                TICKS_PER_CYCLE
	protocol			rings	
}
	
control.topicpop 		poldercast.observers.TopicPopularity
{
	step				TICKS_PER_CYCLE
	from                TICKS_PER_CYCLE
	protocol			rings	
}	

control.load			poldercast.observers.DistributionLoad
{
	step				TICKS_PER_CYCLE
	from                TICKS_PER_CYCLE
	protocol			dissemination	
}

control.delayDistr		poldercast.observers.DelayDistribution
{
	step				TICKS_PER_CYCLE
	from                TICKS_PER_CYCLE
	protocol			dissemination	
}

control.dfDisrt			poldercast.observers.DFDistribution
{
	step				TICKS_PER_CYCLE
	from                TICKS_PER_CYCLE
	protocol			dissemination	
}